{"version":3,"file":"mongoqueue.service.js","sourceRoot":"","sources":["mongoqueue.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {JobModel, QueueModel} from './mongoqueue_model_mongo'\n\nimport {MongooseConfiguration} from './mongoqueue.interface'\n\nexport class MongoQueueService{\n    \n    private static funcs:any = {}\n\n    public static get Funcs()\n    {\n        return MongoQueueService.funcs\n    }\n\n    public static set Func(value:any)\n    {\n        for (let prop in value)\n        {\n          MongoQueueService.funcs[prop] = value[prop]\n        }    \n    } \n    private queueService: any\n    private jobService: any\n\n    private config:MongooseConfiguration\n    \n    constructor(config:MongooseConfiguration)\n    {\n      this.config = config\n      this.queueService = new QueueModel(this.config).getQueueModelService()\n      this.jobService = new JobModel(this.config).getJobModelService()\n    }  \n    \n    //Queue\n    public async getQueues(filter: any) {\n      return await this.queueService.getQueues(filter)\n    }\n\n    public async createQueue(data:any) {\n      const newQueue={\n        code: data.code,\n        name: data.name,\n        status: data.status ?? 1,\n        consumers:data.consumers ?? 1}\n      //return await this.queueService.createQueue(newQueue)\n      const filter = {\n        code:data.code\n      }\n      const allowNew = true\n      return await this.queueService.updateQueueByFilter(filter, newQueue, allowNew)\n    }\n\n    public async updateQueue(filter: any, data: any, allowNew=false) {\n      const updateQueue={\n        code: data.code,\n        name: data.name,\n        status:data.status ?? 1,\n        consumers:data.consumers ?? 1}\n      return await this.queueService.updateQueueByFilter(filter, updateQueue, allowNew)\n    }\n\n    public async removeQueue(id:string) {\n      return await this.queueService.removeQueue(id)      \n    }\n\n    //Job\n    public async getJobs(filter: any) {\n      return await this.jobService.getJobs(filter)\n    }\n\n    public async createJob(data:any) {\n      //get queues \n      const filter = {code:data.queue_code,\n      status: 1}\n      const queues = await this.getQueues(filter)\n\n      //queue is existed and status is active\n      if (queues.length > 0)\n      {\n        //upsert job\n        const allowNew = true\n        const filter = {org_id:data.org_id,\n        queue_code:data.queue_code,\n        msg: data.msg}\n        return await this.jobService.updateJobByFilter(filter, data, allowNew)\n      }        \n      else\n        return null\n    }\n\n    public async updateJob(filter: any, data: any, allowNew=false) {\n      return await this.jobService.updateJobByFilter(filter,data,allowNew)\n    }\n\n    public async removeJob(id: string) {\n      return await this.jobService.removeJob(id)\n    }\n\n    public async pickJob(queuecode: string) {\n      /*\n        check length of queue\n        check processing job of org_id\n        get job with status ready \n      */\n      const filter = {queue_code:queuecode,\n      status:0}\n      //MongoQueueService.funcs[queuecode]\n      const job = await this.jobService.getJobs(filter)\n      \n      //update job is processing\n      const filterUpdate = {_id:job[0]?._id}\n      const data = {status:1}\n      const allowNew = false\n      await this.jobService.updateJobByFilter(filterUpdate, data , allowNew)\n      //await this.jobService.updateJob(job._id, data , allowNew)\n\n      return job\n    }\n\n    public async pingJob(id: string) {\n      const filter = {_id:id}\n      const data = {}\n      const allowNew = false\n\n      return await this.jobService.updateJobByFilter(filter, data , allowNew)\n    }\n\n    public async updateAckJob(id: string) {\n      const filter = {_id:id}\n      const data = {status:2}\n      const allowNew = false\n\n      return await this.jobService.updateJobByFilter(filter, data , allowNew)\n    }\n}"]}