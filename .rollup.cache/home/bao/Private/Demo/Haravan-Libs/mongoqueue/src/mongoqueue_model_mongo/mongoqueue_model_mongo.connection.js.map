{"version":3,"file":"mongoqueue_model_mongo.connection.js","sourceRoot":"","sources":["mongoqueue_model_mongo.connection.ts"],"names":[],"mappings":";AAAA,OAAO,EACL,OAAO,EACP,UAAU,EAGV,KAAK,EAEN,MAAM,UAAU,CAAA;AAIjB;IAME,eAAY,MAA4B;QACtC,IAAI,MAAM;YACR,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;IAC1B,CAAC;IAEM,yBAAS,GAAhB,UAAiB,MAA4B;;QAC3C,KAAK,CAAC,MAAM,GAAG,MAAM,CAAA;QACrB,IAAM,WAAW,GAAG,MAAM,CAAC,IAAI,IAAI,EAAE,CAAA;QACrC,IAAM,WAAW,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,CAAA;QACxC,IAAM,MAAM,GAAW,UAAG,WAAW,CAAC,QAAQ,eAAK,WAAW,CAAC,IAAI,SAAG,WAAW,CAAC,QAAQ,CAAE,CAAA;QAG5F,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE;YAEvB,KAAK,CAAC,KAAK,EAAG,CAAA;YACd,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC,CAAA;YAEtC,OAAO,CAAC,WAAqB,EAAE,MAAA,KAAK,CAAC,MAAM,0CAAE,iBAAiB,CAAC,CAAA;YAC/D,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAA;YAE9C,UAAU,CAAC,EAAE,CAAC,MAAM,EAAE;gBACpB,OAAA,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,mBAAmB,CAAC;YAAxC,CAAwC,CAAC,CAAA;YAE3C,UAAU,CAAC,EAAE,CAAC,aAAa,EAAE;gBAC3B,OAAA,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,qBAAqB,CAAC;YAA1C,CAA0C,CAAC,CAAA;YAE7C,UAAU,CAAC,EAAE,CAAC,cAAc,EAAE;gBAC5B,OAAA,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,sBAAsB,CAAC;YAA3C,CAA2C,CAAC,CAAA;YAE9C,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE;gBACrB,sCAAsC;YACxC,CAAC,CAAC,CAAA;YAEF,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,UAAA,GAAG;gBACxB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;YAClB,CAAC,CAAC,CAAA;SACH;QACD,KAAK,CAAC,YAAY,GAAG,IAAI,CAAA;QAEzB,OAAO;YACL,MAAM,EAAE,KAAK;SACd,CAAA;IACH,CAAC;IAEY,2BAAW,GAAxB,UAAyB,SAAgB,EAAE,WAAkB;;;gBAE3D,sBAAO,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,GAAG,GAAG,SAAS,EAAE,WAAW,CAAC,EAAA;;;KACjE;IAEY,8BAAc,GAA3B;;;;4BAEE,qBAAM,UAAU,CAAC,KAAK,EAAE,EAAA;;wBAAxB,SAAwB,CAAA;;;;;KACzB;IAxDc,kBAAY,GAAY,KAAK,CAAA;IAE7B,WAAK,GAAW,CAAC,CAAA;IAuDlC,YAAC;CAAA,AA3DD,IA2DC;SA3DY,KAAK","sourcesContent":["import {\n  connect,\n  connection,\n  model as createModel,\n  set,\n  model,\n  Schema\n} from 'mongoose'\n\nimport {MongooseConfiguration} from '../mongoqueue.interface'\n\nexport class Mongo\n{\n  private static isInitialize: boolean = false\n  private static config: MongooseConfiguration\n  private static count: number = 0\n\n  constructor(config:MongooseConfiguration){\n    if (config)\n      this.setConfig(config)\n  }\n\n  public setConfig(config:MongooseConfiguration) {\n    Mongo.config = config\n    const databaseURL = config.uris || ''\n    const mongooseURL = new URL(databaseURL)\n    const logURL: string = `${mongooseURL.protocol}//${mongooseURL.host}${mongooseURL.pathname}`\n\n    \n    if (!Mongo.isInitialize) { \n      \n      Mongo.count ++    \n      console.log('call db: ' + Mongo.count)\n\n      connect(databaseURL as string, Mongo.config?.connectionOptions)\n      console.log(\"Mongoose Connection Established\")\n\n      connection.on('open', () =>\n        console.log(logURL, 'MongooseConnected'))\n\n      connection.on('reconnected', () =>\n        console.log(logURL, 'MongooseReconnected'))\n\n      connection.on('disconnected', () =>\n        console.log(logURL, 'MongooseDisconnected'))\n\n      connection.on('close', () =>{\n        //console.log(logURL, 'MongooseClose')\n      })\n\n      connection.on('error', err =>{\n        console.log(err)\n      })\n    }\n    Mongo.isInitialize = true\n\n    return {\n      module: Mongo\n    }\n  }\n\n  public async createModel(modelName:string, modelSchema:Schema)\n  {\n    return model(Mongo.config.prefix + '-' + modelName, modelSchema) \n  }\n\n  public async disconectMongo()\n  {\n    await connection.close()\n  }\n}"]}